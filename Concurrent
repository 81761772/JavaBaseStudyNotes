1.异常不能跨线程传播回main(),JVM的这种设计源自于这样一种理念：“线程是独立执行的代码片断，线程的问题应该由线程自己来解决，而不要委托到外部。”
  故在Java中，线程方法的异常（无论是checked还是unchecked exception），都应该在线程代码边界之内（run方法内）被处理掉。

2.Java中的线程可以分为两类：用户线程(User Thread)和守护线程(Daemon Thread,又称后台线程)。这种分类机制是因JVM而存在的，守护线程具有
  最低的优先级，为系统中的其它对象和线程提供服务。将一个用户线程设置为守护线程的方式是在该用户线程对象创建之前调用它的setDaemon(true)方法。
  典型的守护线程例子是JVM中的系统资源自动回收线程，我们所熟悉的Java垃圾回收线程就是一个典型的守护线程，当我们的程序中不再有任何运行中的Thread，
  程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动离开。当JVM中所有线程都是守护线程
  时，JVM就可以退出了，如果还有一个或以上的非守护线程则JVM不会退出。
