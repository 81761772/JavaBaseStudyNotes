1.关于普通数组与集合类的区别：
  基础教材上有两句话，第一句是“数组的长度是固定的，集合的长度是可变的”，我起初深以为然，而后想到若定义二维数组arr[i][]，则情况又有不同；
  第二句是“数组用来存放基本类型的数据，集合来存放对象的引用”，后半句无可辩驳，集合自然用来存放对象的引用，但凡八大基本数据类型都不能存放在集合中，除非
  是基本数据类型的包装类，而前半句经本人推敲，亦有遗误，试运行如下代码：
  public class Arr{
      public static void main(String[] args){
          Arr[] a = new Arr[1];
          Arr arr = new Arr();
          a[0] = arr;
          for(int i=0;i<a.length;i++){
              System.out.println(a[i]);
          }
      }
  }
  运行结果：study.Test@15db9742
  可见若将普通数组设为对象类型，也能储存对象的引用，故教材出现遗漏在所难免，吾辈毋要妄自菲薄，有疑问当深究，莫要迷信权威。

2.迭代器Iterator的next()方法返回的是Object。

3.在JavaSE5之前，容器存储的对象只有通用类型Object，如果想在容器（集合类，如Map,Set,List）中存储更具体的类型，就需要执行向下转型，
  但这种操作是有风险的，所以JavaSE5增加了参数化类型（即泛型），解决了上述问题。
  
4.为Collection容器添加一组元素有以下几种方式：（①②③是关联的）
  ①∵Arrays.asList()方法接受一个数组或一个用逗号分隔的元素列表（使用可变参数），并将其转换为一个List对象，在ArrayList进行实例化时将该List对象
   作为参数传入构造方法。eg：
   Collection<Integer> collection = new ArrayList<Integer>(Arrays.asList(1,2,3));
  ②Collections.addAll()方法接受一个Collection对象，以及一个数组或一个用逗号分隔的列表，将元素添加到Collection中。eg:
   Integer[] moreInts = {4,5,6};
   collection.addAll(Arrays.asList(moreInts));
  ③Collection的构造器可以接受另一个Collection，用它来将自身初始化。eg:
   Collections.addAll(collection,7,8,9);
  ④直接使用Arrays.asList()方法返回一个List对象并赋给容器引用。eg:
   List<Integer> list = Arrays.asList(10,11,12);
   
5.关于显式类型参数说明：
  eg:
  class Snow{}
  class Powder extends Snow{}
  class Light extends Powder{}
  class Heavy extends Powder{}
  public class AsListInference{
      public static void main(String[] args){
          List<Snow> snow = Arrays.asList(new Light(),new Heavy());
      }
  }
  ∵Light和Heavy继承自Powder，∴当试图创建snow时，Arrays.asList()中只有Power类型，因此它会创建List<Powder>而不是List<Snow>。
  针对这种情况，可以在Arrays.asList()中间插入一条“线索”，以告诉编译器对于由Arrays.asList()产生的List类型，实际的目标类型应该是什么，这就是
  显式类型参数说明。eg:
  List<Snow> snow = Arrays.<Snow>asList(new Light(),new Heavy());
