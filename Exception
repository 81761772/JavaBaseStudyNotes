1.异常可按以下两种方式分类：
  ①异常分为：“被检查的异常”和“不被检查的异常”
  （1）被检查的异常：即在方法的声明中声明的异常，在编译时被强制检查，应该用try-catch块代码处理，或者在main方法中用throws关键字让JRE了解
   程序可能抛出哪些异常，Exception是所有被检查异常的基类，适用于那些不是因程序引起的错误情况，比如：读取文件时文件不存在引发的
   FileNotFoundException。
  （2）不被检查的异常：在方法的声明中没有声明，但在方法的运行过程中发生，这种异常是错误，会被自动捕获，不受检查的异常在程序中不要求被处理
   或用throws语句告知，RuntimeException是所有不受检查异常的基类，通常都是由于糟糕的编程引起的，比如：在对象引用时没有确保对象非空而
   引起的NullPointerException。
  ②异常分为：
  （1）Error:表示致命的错误，比如内存不够，字节码不合法等。
  （2）Exception:属于应用程序级别的异常，这类异常必须捕捉。
  （3）RuntimeException:RuntimeException继承了Exception，这个表示系统异常，比较严重。

2.eg:
public class MyException extends Exception{
    public MyException(String ErrorMessage){
        super(ErrorMessage);
    }
}
以上代码创建了一个自定义异常，需要注意的是：父类默认构造方法是不含参的，如果需要在子类的构造函数中传递参数，则需要使用super(传递参数)。

3.eg:
try{
    //代码
}catch(ExceptionType1 e1){
    //代码
}catch(ExceptionType2 e2){
    //代码
}
如果抛出异常的数据类型与ExceptionType1匹配，它在这里就会被捕获。如果不匹配，它会被传递给第二个catch块。

4.catch(ExceptionType e)会捕获ExceptionType以及所有从它派生的异常，这就是为什么我们一般都会用Exception来捕获大多数的异常的原因。

5.当覆盖方法的时候，只能抛出在基类方法的异常说明里列出的那些异常，但这种限制对构造器不起作用，子类构造器可以抛出任何异常，而不必理会基类构造器
  所抛出的异常。

6.可以对方法进行异常说明，实际却不抛出异常，这样做的好处是为异常先占个位子，以后就可以抛出这种异常而不用修改已有的代码，而且如果有子类覆盖了
  这个方法并想要抛出异常，就会非常方便。

7.重抛异常会把异常抛给上一级环境中的异常处理程序，同一个try块的后续catch子句将被忽略。

8.若想把当前异常对象重新抛出，那么printStackTrace()方法显示的将是原来异常抛出点的调用栈信息，而并非重新抛出点的信息，要想更新这个信息，
  可以调用fillInStackTrace()方法，该方法将返回一个Throwable对象，它是通过把当前调用栈信息填入原来那个异常对象而建立的。eg:
  public class Test{
      public static void f() throws Exception{
          throw new Exception("f()");
      }
      public static void g() throws Exception{
          try{
              f();
          }catch(Exception e){
              e.printStackTrace(System.out);
              throw e;
          }
      }
      public static void h() throws Exception{
          try{
              f();
          }catch(Exception e){
              e.printStackTrace(System.out);
              throw (Exception)e.fillInStackTrace();
          }
      }
      public static void main(String[] args){
          try{
              g();
          }catch(Exception e){
              e.printStackTrace(System.out);
          }
          try{
              h();
          }catch(Exception e){
              e.printStackTrace(System.out);
          }
      }
  }
  /*Output:
  java.lang.Exception: f()
	at com.study.Test.f(Test.java:7)
	at com.study.Test.g(Test.java:11)
	at com.study.Test.main(Test.java:27)
  java.lang.Exception: f()  //使用pringStackTrace()方法后仍显示f()方法的异常
	at com.study.Test.f(Test.java:7)
	at com.study.Test.g(Test.java:11)
	at com.study.Test.main(Test.java:27)
  java.lang.Exception: f()
	at com.study.Test.f(Test.java:7)
	at com.study.Test.h(Test.java:19)
	at com.study.Test.main(Test.java:32)
  java.lang.Exception: f()  //使用fillInStackTrace()方法后不再显示f()方法的异常
	at com.study.Test.h(Test.java:22)
	at com.study.Test.main(Test.java:32)
  */

9.可以声明方法将抛出异常，实际上却不抛出，这样做的好处是为异常先占个位子，以后就可以抛出这种异常而不用修改已有的代码。

10.关于异常链：若想要在捕获一个异常后抛出另一个异常，且希望保存原始异常的信息，可以使用异常链机制。
  ---------       -------------
  |原始异常| <---> |cause|新异常|   （左图为异常链概念模型）
  ---------       ------------- 
  Throwable的子类在构造器中可以接受一个cause（因由）作为参数，这个cause就是原始异常的引用。通过把原始异常传递给新的异常，可以实现
  既能在当前位置创建并抛出新异常，又能通过cause在这个异常链中追踪到异常最初发生的位置。在Throwable的子类中，只有三种基本的异常类提供了带cause参数
  的构造器，它们是Error、Exception和RuntimeException，若要把其他类型的异常链接起来，应该使用initCause()方法而不是构造器。
  即实现异常链有两种方法：
  ①使用initCause()方法：
   如下例第108-110行。
  ②调用异常类的带cause参数的构造器：
   将下例第108-110行改为：
   ArriveLateException ale = new ArriveLateException(e);
   throw ale;
  还有一点需要注意：当使用RuntimeException作为新异常对原始异常进行包装时，bossSay()方法不需要加上“throws ArriveLateException”后缀，
  因为运行时异常会自动被Java虚拟机抛出，故不必在异常说明中把他们列出来。
  
  eg:
  class TrafficJamException extends Exception{}
  class ArriveLateException extends Exception{
      public ArriveLateException(){}
  }
  public class Boss{
      public void workerSay() throws TrafficJamException{
	  throw new TrafficJamException();
      }
      public void bossSay() throws ArriveLateException{
	  try{
	      workerSay();
	  }catch(TrafficJamException e){
	      e.printStackTrace();
	      ArriveLateException ale = new ArriveLateException();
	      ale.initCause(e);
	      throw ale;
	  }
      }
      public static void main(String[] args){
	  try{
	      new Boss().bossSay();
	  }catch(Exception e){
	      e.printStackTrace();
	  }
      }
  }
  /*Output:
  com.study.TrafficJamException
	at com.study.Boss.workerSay(Boss.java:11)
	at com.study.Boss.bossSay(Boss.java:16)
	at com.study.Boss.main(Boss.java:27)
  com.study.ArriveLateException
	at com.study.Boss.bossSay(Boss.java:19)
	at com.study.Boss.main(Boss.java:27)
  Caused by: com.study.TrafficJamException  //本行说明“ArriveLateException Caused by TrafficJamException”
	at com.study.Boss.workerSay(Boss.java:11)
	at com.study.Boss.bossSay(Boss.java:16)
	... 1 more
  */
  如果职员在上班路上发生了堵车异常（假设一定迟到），则会被老板视为发生了迟到异常，即“堵车异常”是迟到异常的因由（cause）。
  但老板并不在乎职员的迟到原因，所以只抛出迟到异常，而将堵车异常留作案底保存。

11.异常丢失：有以下两种方式：
  ①eg:
   public class LostException1{
       public void one() throws Exception{
           throw new Exception();
       }
       public void two() throws Exception{
           throw new Exception();
       }
       public static void main(String[] args){
           try{
	       LostException1 le1 = new LostException1();
	       try{
	           le1.one();
	       }finally{
	           le1.two();
	       }
	   }catch(Exception e){
	       e.printStackTrace();
	   }
       }
   }
   /*Output:
     java.lang.Exception
	at com.study.LostException1.two(Test.java:6)
	at com.study.LostException1.main(Test.java:14)
   */
   输出中的one()方法的异常信息不见了，它被finally子句里的two()方法的异常信息所取代。
   
  ②eg:
   public class LostException2{
       public static void main(String[] args){
           try{
	       throw new Exception();
	   }finally{
	       return;
	   }
       }
   }
   从finally子句中返回或从catch子句中返回，即使抛出了异常，也不会产生任何输出。
