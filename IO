1.关于缓冲区：以在线观看视频为例，如果网速慢、播放前进的速度快，就会出现卡顿，若不暂停播放进行缓冲，观看体验差；
  同理，在使用数据输入流时，如果没有缓冲，则每次调用read()或readLine()都会导致从文件中读取数据，若两者存在速度差，则传输相当低效，
  若使用缓冲区，则两个方法会从缓冲区读取数据。

2.InputStream和OutputStream提供面向字节的I/O功能，而Read和Write提供面向字符的I/O功能。
  设计后两者主要是为了国际化：旧的I/O流继承层次机构仅支持8位字节流，且不能很好地处理16位的Unicode字符（Unicode用于字符国际化）。
  但有时必须结合使用字节和字符层次结构中的类：InputStreamReader可将InputStream转换为Reader，而OutputStreamWriter可将OutputStream
  转换为Writer。

3.关于被装饰数据流的关闭问题(此概念仍存疑，以后若发现有误即改)：
  eg1:
  FileReader fr = new FileReader("D:/test.txt");
  BufferedReader br = new BufferedReader(fr);
  //这种形式需分开关闭数据流。
  fr.close();
  br.close();
  
  eg2:
  BufferedReader br = new BufferedReader(new FileReader("D:/test.txt"));
  //这种形式只要关闭装饰类数据流即可。
  br.close();

4.readLine()方法在读取文件时，会自动删除行末尾的换行符。
