1.构建一个子类对象时，先执行其父类的构造方法，再执行自身的构造方法；除构造器外，编译器禁止在其他任何方法中调用构造器；尽管可以用this调用一个构造器，
  但不能调用多个，而且必须将构造器调用语句置于起始处，eg:
  class Test(){
      Test(){
          this(5);//在该构造器中调用另一个构造器，该语句必须置于构造器的开头。
        //this(5);  只能调用一个。
      }
      Test(int i){
          System.out.println(i);
      }
  }

2.this关键字只能在方法内部使用，表示调用该方法的对象的引用，如this.a即该对象的成员，this.b()即该对象的方法。

3.如果想指定地调用父类的一个带参数的构造器，则必须在子类的构造器中编写super(参数)语句。

4.若父类已经定义了一个有参的构造器，则编译器不会调用默认的构造器，此时子类必须在自己的构造器中显式调用父类的构造器，才能确保子类在初始化前
  父类会被实例化。eg:
  class Father{
      Father(String str){}
  }
  class Son extends Father{
      Son(String str){
          super(str);
      }
  }

5.类的每个成员保证都会有一个初始值（对象引用初始值为NULL),但对于方法的局部变量，Java则不会提供初始值，eg:
  class Test{
      int i;//系统自动赋值为0
      void test(){
          int j;
          System.out.println(j);//报错，j未初始化。
      }
  }

6.可以在构造器中进行初始化，但构造器外的初始化优先于构造器内的初始化。

7.静态对象初始化优先于非静态对象初始化。

8.静态方法、静态变量和静态代码块：
  ①静态方法：使用静态方法不需要创建对象，故在静态方法中不能调用非静态成员，也不能使用super和this；
  ②静态变量：不能把任何方法体内的变量声明为static；
  ③静态代码块：当类被载入时，静态代码块被执行，且只被执行一次。

9.编译时类型和运行时类型：eg: Animal a = new Dog(); //Dog继承自Animal
  Java程序状态分为编译和运行两种状态，编译时，JVM会在栈中静态创建基本数据变量，和引用数据变量的引用，则上例中a的编译时类型是Animal；
  当运行这句代码时，JVM在堆中为a新建一块内存，故a的运行时类型是Dog。
