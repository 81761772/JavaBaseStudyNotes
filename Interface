1.抽象类不能被实例化，因为抽象类中全是抽象方法，通过实例化对象调用这些不可用的方法是没有意义的。

2.接口中定义的字段（如常量）必须赋予初值，因为在接口中定义的任何字段都是被static和final修饰的（隐式）；而被final修饰的字段必须有初值，初值可以
  是未赋值的字段，eg: int i; final int f = i; 

3.在接口中定义的方法必须被定义为public或abstract形式。

4.接口中的内部类被默认为public和static的。

5.Java中的普通类不支持多继承，但接口支持多继承以起到扩展功能的作用。
   
6.适配器模式：“适配”即源到目标的适配，例如一个应聘者掌握Java基础知识和数据结构知识，但应聘的公司不仅要求应聘者掌握这两种知识，还要求掌握
  数据库知识，故需要将源（应聘者）适配到目标（公司）。适配是为了实现某种目的而为一个源类暂时性的加上某种方法，故不能直接在应聘者类中添加
  “数据库知识”方法。所以就要用到适配器来解决该问题。
  适配器模式分为两种：
  ①面向类的适配器模式：只为单一的某个类实现适配的模式
   eg:
   //源类代码
   public class Applicant{
       public void JavaKnowledge(){}
       public void DataStructureKnowledge(){}
   }
   //目标接口代码
   public interface Company{
       public void JavaKnowledge(){}
       public void DataStructureKnowledge(){}
       public void DatabaseKnowledge(){}
   }
   //适配器代码
   public class Adapter extends Applicant implements Company{
       public void DatabaseKnowledge(){}
   }
   由于Java的普通类是单继承的，故Adapter只能继承Applicant这一个类，只为Applicant类实现适配。
   
   ②面向对象的适配器模式：将源作为一个对象聚合到适配器类中
    eg:（源类和目标接口代码不变）
    //适配器代码
    public class Adapter implements Company{
        Applicant applicant;
        public Adapter(Applicant applicant){
            this.applicant = applicant;
        }
        public void JavaKnowledge(){
            applicant.JavaKnowledge();
        }
        public void DataStructureKnowledge(){
            applicant.DataStructureKnowledge();
        }
        public void DatabaseKnowledge(){}
    }
    把“源”作为一个构造器参数传入适配器，然后执行接口所要求的方法，这种适配模式可以为多个源进行适配（如Applicant类的子类）。
   注：
   默认适配器模式：若想实现一个接口但只想实现接口中的一部分方法时，可用默认的适配器模式，即在接口和具体实现类之间添加一个抽象类，用抽象类去
   空实现目标接口的所有方法。而具体的实现类只需覆盖其想要实现的方法即可。
   eg:
   //接口类
   public interface Company{
       public void JavaKnowledge();
       public void DataStructureKnowledge();
       public void DatabaseKnowledge();
   }
   //抽象类
   public class CompanyDefault implements Company{
       public void JavaKnowledge(){}
       public void DataStructureKnowledge(){}
       public void DatabaseKnowledge(){}
   }
   //实现类
   public class CompanyUse extends CompanyDefault{
       //只想实现接口中的DatabaseKnowledge()方法
       public void DatabaseKnowledge(){
           System.out.println("I know database well!");
       }
   }
   
7.工厂模式：工厂模式主要是为创建对象提供过渡接口，将创建对象的具体过程屏蔽隔离起来，以达到提高灵活性的目的。
  为便于理解，举例如下：有个土豪有三辆车：宝马、奔驰和奥迪，当他坐上宝马时，对司机说“开宝马车”，坐奔驰时，对司机说“开奔驰车”，坐奥迪时，对司机说
  “开奥迪车”。代码如下：
  //以下几个类同包不同源。
  //有Benz,Bmw,Audi三种车可供Driver驾驶。
  public class Benz{
      //调用drive()方法可执行开车行为
      public void drive(){
          System.out.println("Drive Benz");
      }
  }
  public class Bmw{
      public void drive(){
          System.out.println("Drive Bwm");
      }
  }
  public class Audi{
      public void drive(){
          System.out.println("Drive Audi");
      }
  }
  //Driver可驾驶以下三种车
  public class Driver{
      public static Benz driveBenz(){
          return new Benz();
      }
      public static Bmw driveBmw(){
          return new Bmw();
      }
      public static Audi driveAudi(){
          return new Audi();
      }
  }
  public class Richman{
      public static void main(String[] args){
          //已经坐上奔驰车
          Benz benz = Driver.driveBenz();
          //对司机说“开奔驰车”
          benz.drive();
      }
  }
  
  工厂模式分为三类：
 （1）简单工厂模式：
  组成成分：
  ①工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑。在Java中它往往由一个具体类实现。     
  ②抽象产品角色：它一般是具体产品继承的父类或者实现的接口。在Java中由接口或者抽象类来实现。 
  ③具体产品角色：工厂类所创建的对象就是此角色的实例。在Java中由一个具体类实现。
  虽然上例的源码可以正常运行，但你会觉得土豪有毛病，直接说“开车”不就行了？简单工厂模式可解决该问题。代码如下：
  //以下几个类同包不同源。
  //抽象产品角色
  public interface Car{
      public void drive();
  }
  //具体产品角色
  public class Benz implements Car{
      public void drive(){
          System.out.println("Drive Benz");
      }
  }
  public class Bmw implements Car{
      public void drive(){
          System.out.println("Drive Bwm");
      }
  }
  public class Audi implements Car{
      public void drive(){
          System.out.println("Drive Audi");
      }
  }
  //工厂类角色
  public class Driver{
      //工厂方法，返回类型为抽象产品角色
      public static Car driveCar(){
          if(s.equalsIgnoreCase("Benz")){
              return new Benz(); 
          }else if(s.equalsIgnoreCase("Bmw")){
              return new Bmw();
          }else if(s.equalsIgnoreCase("Audi")){
              return new Audi();
          }else{
              System.out.println("error");
          }
      }
  }
  //土豪是接受工厂模式服务的客户端。
  public class Richman{
      public static void main(String[] args){
          //已经坐上奔驰车
          Car car = Driver.driverCar("benz");
          //对司机说“开车”
          car.drive();
      }
  }
  通过使用简单工厂模式，不仅矫正了土豪的“毛病”，而且使客户端不必直接创建产品对象，只是负责消费产品。
   
 （2）工厂方法模式：
  组成成分：
  ①抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。 
  ②具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。 
  ③抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。 
  ④具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。 
  从开闭原则（对扩展开放；对修改封闭）来分析简单工厂模式。当客户（土豪）想添加具体产品角色（新买一辆车）的时候，只要符合抽象产品角色的特征，
  那么通知工厂类（司机）就可以被客户使用了。故对产品部分来说，它是符合开闭原则的；但工厂部分并不理想，因为每添加一件具体产品角色，都要在工厂类中
  增加相应的业务逻辑或判断逻辑，这显然是违背开闭原则的。可想而知对于新产品的加入，工厂类是很被动的。
  这样的工厂类被称为上帝类（具有太多功能而难以维护的类）。形象点说就是土豪新买了很多辆车，司机难以管理维护。
  而工厂方法模式可解决以上问题。代码如下：
  //以下几个类同包不同源。
  //抽象产品角色
  public interface Car{
      public void drive();
  }
  //具体产品角色
  public class Benz implements Car{
      public void drive(){
          System.out.println("Drive Benz");
      }
  }
  public class Bmw implements Car{
      public void drive(){
          System.out.println("Drive Bwm");
      }
  }
  public class Audi implements Car{
      public void drive(){
          System.out.println("Drive Audi");
      }
  }
  //抽象工厂角色 
  public interface Driver{ 
      public Car driverCar(); 
  } 
  //具体工厂角色
  public class BenzDriver implements Driver{ 
      public Car driverCar(){ 
          return new Benz(); 
      } 
  } 
  public class BmwDriver implements Driver{ 
      public Car driverCar(){ 
          return new Bmw(); 
      } 
  } 
  //客户端
  public class Richman{ 
      public static void main(String[] args){  
          Driver driver = new BenzDriver(); 
          Car car = driver.driverCar(); 
          car.drive(); 
  } 
  相比简单工厂模式，工厂方法模式将工厂类角色分为抽象工厂角色和具体工厂角色。形象点说，即土豪感觉司机管理这么多车有些力不从心，且念到司机这些年
  兢兢业业为自己工作，于是给司机升了管理岗，又招了几个新司机分别负责每辆车，由老司机来管理这些新司机。
   
 （3）抽象工厂模式：（待补充）
