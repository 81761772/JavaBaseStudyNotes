1.类被使用前的准备步骤：
  ①加载：由类加载器执行，首先查找字节码（即.class文件），并从这些字节码中创建一个Class对象；
  ②链接：验证类中的字节码，为静态域分配存储空间，若有需要则解析该类创建的对其他类的所有引用；
  ③初始化：若该类具有超类，则初始化其超类（若超类仍有超类则向上递归初始化），执行静态初始化器和静态初始化块。
  
2.获取对象引用的三种方式：
  ①因为所有类都继承自含有getClass()方法的Object类，所以它们都可以调用该方法获取一个自身对象运行时类的Class对象引用，
   弊端是必须提前创建该类对象；
  ②所有数据类型(基本数据类型和引用数据类型)都有一个静态的属性class，可通过例如“Integer.class”获取Integer的对象引用，
   弊端是必须提前明确该类；
  ③Class.forName()方法，获取指定类型的对象引用，这种方式的扩展性最强，只需将类名的字符串传入即可。
   当调用该方法后，该类被初始化，如加载数据库驱动的操作“Class.forName("com.mysql.jdbc.Driver")”,这个驱动类内部应该是有一段
   静态代码，在类被初始化后执行加载数据库驱动的操作。
  
3.获取数组的Class类型：由于数组是引用数据类型，不存在类名，故不能用“Class.forName(类名)”方式获取Class类型，只能用另外两种方法。

4.若多个数组具有相同的维数和元素类型，则它们共享同一份字节码(Class)对象。eg:
  int[] arr1 = {1};
  int[] arr2 = {2};
  System.out.println(arr1.getClass()==arr2.getClass());
  /*Output:true*/
