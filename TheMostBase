1.目前来看，Java中不存在指针，而用引用来代替。
  
2.static关键字不能应用于局部变量，只能作用于域。

3.Java中的字段有多种称呼：成员、数据成员、域。

4.javadoc只能为public和protected成员进行文档注释，private和包内可访问成员的注释会被忽略掉，不过可以用-private进行标记，以便
  把private成员的注释也包括在内。

5.关于传递可变参数：eg: public Example(String...strings)
   即调用时参数个数是可变的。
   
6.Java只有值传递，不存在引用传递：
 （值传递，即将存储单元中的内容传给调用函数中的那个参数）
  eg1:
  //定义域
  int i = 0;
  //定义方法
  public void setI(int i){
      i = 1;
  }
  //调用方法
  System.out.println(i);
  setI(i);
  System.out.println(i);
  /*Output:
    0
    1
  */
  
  eg2:
  //定义Person类
  class Person(){
      String name = "Tom";
  }
  //定义改变Person类属性的方法
  public void changeName(Person p){
      person = "Marry";
  }
  //调用方法
  Person person = new Person();
  changeName(person);
  System.out.println(person.name);
  /*Output:
    Marry
  */
  
  eg1是一个典型的值传递，无需多言。eg2看似是传递Person对象的引用person，其实仍是值传递，原理如下：
  创建的对象Person保存在堆中，而对象引用person保存在堆栈中，假设Person的初始地址是000010，则person存储单元中的内容就是000010
  （即对象引用存储的内容就是对象的初始地址），当调用方法changeName()时，形参变量p在堆栈中也有一个地址，此时person将自己的存储内容
  （即对象的地址）传递给了p，导致p的存储内容也变成了000010，所以p也指向了Person对象，故能实现方法对对象属性的操作了。
  所以eg2符合值传递的定义。
  
7.若想要通过将对象引用作为参数传递以改变对象的属性，则必须提前初始化对象。原因见6。

8.对象存储在堆中，对象引用存储在堆栈中，基本类型（如int）存储在堆栈中，封装类（如Integer）存储在堆中。

9.数据类型分为基本数据类型和引用数据类型，前者即八大基本数据类型（int等），后者的特征：①必须要实例化后才能使用；②包含一些属性和方法。

10.C语言的函数名不能重复，而Java可以对函数（方法）进行重载。
   
11.使用System.out.println("对象引用")方法打印对象时，会默认调用该对象的toString()方法。

12.Random类的种子默认于系统时间相关，如果指定一个种子，则会生成相同的数字。

13.当使用“当前类名.class.getResource(String src)”获取所需资源的url时，常用方法如下：
   设包a中存在类A和包a.b，a.b中存在类A需要的图片资源test.png，使用“A.class.getResource("/a/b/test.png")”即可获取资源url。
   原理：("/")表示路径"bin"。
