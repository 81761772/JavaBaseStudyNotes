1.
  for(int i = first;i < last;i++){
      if(Condition){
          return target;
      }
      return -1;
  }

  注意以上用法：for循环会一直进行，直到条件Condition得到满足，此时返回target，跳出for循环（需要注意的是，假如第一次循环和第二次循环都满足
  Condition条件时，循环会在第一次跳出，而不执行第二次循环）。若一直到循环结束Condition都没有得到满足，则返回-1。

2.目前来看，Java中不存在指针，而用引用来代替。

3.equals()方法用于比较两个对象引用所指的内容是否相等，但因基本类型不是对象故无法调用方法，所以equals()方法不适用于基本类型；
  而“==”运算符比较的是两个对象引用的地址是否相等。

4.多态即对象类型的多种形态。

5.多态的局限性：①只有非private方法才可以被覆盖（因为private方法被认为是final方法）；②只有方法调用可以是多态的（如域不是多态的）；
  ③静态方法不具有多态性。
  
6.Java SE5中添加了协变返回类型，它表示在导出类中的被覆盖方法可以返回基类方法的返回类型的某种导出类型。
  eg:
  class Grain{
      public String toString(){
          return "Grain";
      }
  }
  class Wheat extends Grain{
      public String toString(){
          return "Wheat";
      }
  }
  class Mill{
      Grain process(){
          return new Grain();
      }
  }
  class WheatMill extends Mill{
      Wheat process(){
          return new Wheat();
      }
  }
  public class CovariantReturn{
      public static void main(String[] args){
          Mill m = new Mill();
          Grain g = m.process();
          System.out.println(g);
          m = new WheatMill();
          g = m.process();
          System.out.println(g);
      }
  }
  /*输出结果：
    Grain
    Wheat*/
  就此例对协变返回类型的概念作详解：导出类是WheatMill，被覆盖方法是Wheat process()，它返回的是Wheat类型，而Wheat就是WheatMill的基类Mill的
  方法Grain process()的返回类型Grain的导出类型。
  在Java SE5之前的版本强制process()的覆盖版本返回Grain。

7.static关键字不能应用于局部变量，只能作用于域。

8.如果某个方法是静态的，它的行为就不具有多态性，eg:Father是Son的基类，他们都有eat()方法，进行向上转型：Father f = new Son();然后调用eat()
  方法：f.eat()，若eat()被修饰为static，则调用基类的eat()，否则调用子类的eat()。

9.Java中的字段有多种称呼：成员、数据成员、域。

10.接口中定义的字段（如常量）必须赋予初值，因为在接口中定义的任何字段都是被static和final修饰的（隐式）；而被final修饰的字段必须有初值，初值可以
  是未赋值的字段，eg: int i; final int f = i; 

11.在接口中定义的方法必须被定义为public或abstract形式。

12.eg:
   class Father{
       public void say(){}
   }
   class Son extends Father{}
   public class Meet{
       public static void main(String[] args){
           Son son = new Son();
           son.say();
       }
   }
   虽然在Son类中没有重写Father类的say()方法，仍可以基于son对象引用调用该方法。
   
13.适配器模式：“适配”即源到目标的适配，例如一个应聘者掌握Java基础知识和数据结构知识，但应聘的公司不仅要求应聘者掌握这两种知识，还要求掌握
   数据库知识，故需要将源（应聘者）适配到目标（公司）。适配是为了实现某种目的而为一个源类暂时性的加上某种方法，故不能直接在应聘者类中添加
   “数据库知识”方法。所以就要用到适配器来解决该问题。
   适配器模式分为两种：
   ①面向类的适配器模式：只为单一的某个类实现适配的模式
    eg:
    //源类代码
    public class Applicant{
        public void JavaKnowledge(){}
        public void DataStructureKnowledge(){}
    }
    //目标接口代码
    public interface Company{
        public void JavaKnowledge(){}
        public void DataStructureKnowledge(){}
        public void DatabaseKnowledge(){}
    }
    //适配器代码
    public class Adapter extends Applicant implements Company{
        public void DatabaseKnowledge(){}
    }
    由于Java的普通类是单继承的，故Adapter只能继承Applicant这一个类，只为Applicant类实现适配。
    
    ②面向对象的适配器模式：将源作为一个对象聚合到适配器类中
     eg:（源类和目标接口代码不变）
     //适配器代码
     public class Adapter implements Company{
         Applicant applicant;
         public Adapter(Applicant applicant){
             this.applicant = applicant;
         }
         public void JavaKnowledge(){
             applicant.JavaKnowledge();
         }
         public void DataStructureKnowledge(){
             applicant.DataStructureKnowledge();
         }
         public void DatabaseKnowledge(){}
     }
     把“源”作为一个构造器参数传入适配器，然后执行接口所要求的方法，这种适配模式可以为多个源进行适配（如Applicant类的子类）。
    注：
    默认适配器模式：若想实现一个接口但只想实现接口中的一部分方法时，可用默认的适配器模式，即在接口和具体实现类之间添加一个抽象类，用抽象类去
    空实现目标接口的所有方法。而具体的实现类只需覆盖其想要实现的方法即可。
    eg:
    //接口类
    public interface Company{
        public void JavaKnowledge();
        public void DataStructureKnowledge();
        public void DatabaseKnowledge();
    }
    //抽象类
    public class CompanyDefault implements Company{
        public void JavaKnowledge(){}
        public void DataStructureKnowledge(){}
        public void DatabaseKnowledge(){}
    }
    //实现类
    public class CompanyUse extends CompanyDefault{
        //只想实现接口中的DatabaseKnowledge()方法
        public void DatabaseKnowledge(){
            System.out.println("I know database well!");
        }
    }
    
14.工厂模式：工厂模式主要是为创建对象提供过渡接口，将创建对象的具体过程屏蔽隔离起来，以达到提高灵活性的目的。
   为便于理解，举例如下：有个土豪有三辆车：宝马、奔驰和奥迪，当他坐上宝马时，对司机说“开宝马车”，坐奔驰时，对司机说“开奔驰车”，坐奥迪时，对司机说
   “开奥迪车”。代码如下：
   //以下几个类同包不同源。
   //有Benz,Bmw,Audi三种车可供Driver驾驶。
   public class Benz{
       //调用drive()方法可执行开车行为
       public void drive(){
           System.out.println("Drive Benz");
       }
   }
   public class Bmw{
       public void drive(){
           System.out.println("Drive Bwm");
       }
   }
   public class Audi{
       public void drive(){
           System.out.println("Drive Audi");
       }
   }
   //Driver可驾驶以下三种车
   public class Driver{
       public static Benz driveBenz(){
           return new Benz();
       }
       public static Bmw driveBmw(){
           return new Bmw();
       }
       public static Audi driveAudi(){
           return new Audi();
       }
   }
   public class Richman{
       public static void main(String[] args){
           //已经坐上奔驰车
           Benz benz = Driver.driveBenz();
           //对司机说“开奔驰车”
           benz.drive();
       }
   }
   
   工厂模式分为三类：
  （1）简单工厂模式：
   组成成分：
   ①工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑。在Java中它往往由一个具体类实现。     
   ②抽象产品角色：它一般是具体产品继承的父类或者实现的接口。在Java中由接口或者抽象类来实现。 
   ③具体产品角色：工厂类所创建的对象就是此角色的实例。在Java中由一个具体类实现。
   虽然上例的源码可以正常运行，但你会觉得土豪有毛病，直接说“开车”不就行了？简单工厂模式可解决该问题。代码如下：
   //以下几个类同包不同源。
   //抽象产品角色
   public interface Car{
       public void drive();
   }
   //具体产品角色
   public class Benz implements Car{
       public void drive(){
           System.out.println("Drive Benz");
       }
   }
   public class Bmw implements Car{
       public void drive(){
           System.out.println("Drive Bwm");
       }
   }
   public class Audi implements Car{
       public void drive(){
           System.out.println("Drive Audi");
       }
   }
   //工厂类角色
   public class Driver{
       //工厂方法，返回类型为抽象产品角色
       public static Car driveCar(){
           if(s.equalsIgnoreCase("Benz")){
               return new Benz(); 
           }else if(s.equalsIgnoreCase("Bmw")){
               return new Bmw();
           }else if(s.equalsIgnoreCase("Audi")){
               return new Audi();
           }else{
               System.out.println("error");
           }
       }
   }
   //土豪是接受工厂模式服务的客户端。
   public class Richman{
       public static void main(String[] args){
           //已经坐上奔驰车
           Car car = Driver.driverCar("benz");
           //对司机说“开车”
           car.drive();
       }
   }
   通过使用简单工厂模式，不仅矫正了土豪的“毛病”，而且使客户端不必直接创建产品对象，只是负责消费产品。
    
  （2）工厂方法模式：
   组成成分：
   ①抽象工厂角色：这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。 
   ②具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。 
   ③抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。 
   ④具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。 
   从开闭原则（对扩展开放；对修改封闭）来分析简单工厂模式。当客户（土豪）想添加具体产品角色（新买一辆车）的时候，只要符合抽象产品角色的特征，
   那么通知工厂类（司机）就可以被客户使用了。故对产品部分来说，它是符合开闭原则的；但工厂部分并不理想，因为每添加一件具体产品角色，都要在工厂类中
   增加相应的业务逻辑或判断逻辑，这显然是违背开闭原则的。可想而知对于新产品的加入，工厂类是很被动的。
   这样的工厂类被称为上帝类（具有太多功能而难以维护的类）。形象点说就是土豪新买了很多辆车，司机难以管理维护。
   而工厂方法模式可解决以上问题。代码如下：
   //以下几个类同包不同源。
   //抽象产品角色
   public interface Car{
       public void drive();
   }
   //具体产品角色
   public class Benz implements Car{
       public void drive(){
           System.out.println("Drive Benz");
       }
   }
   public class Bmw implements Car{
       public void drive(){
           System.out.println("Drive Bwm");
       }
   }
   public class Audi implements Car{
       public void drive(){
           System.out.println("Drive Audi");
       }
   }
   //抽象工厂角色 
   public interface Driver{ 
       public Car driverCar(); 
   } 
   //具体工厂角色
   public class BenzDriver implements Driver{ 
       public Car driverCar(){ 
           return new Benz(); 
       } 
   } 
   public class BmwDriver implements Driver{ 
       public Car driverCar(){ 
           return new Bmw(); 
       } 
   } 
   //客户端
   public class Richman{ 
       public static void main(String[] args){  
           Driver driver = new BenzDriver(); 
           Car car = driver.driverCar(); 
           car.drive(); 
   } 
   相比简单工厂模式，工厂方法模式将工厂类角色分为抽象工厂角色和具体工厂角色。形象点说，即土豪感觉司机管理这么多车有些力不从心，且念到司机这些年
   兢兢业业为自己工作，于是给司机升了管理岗，又招了几个新司机分别负责每辆车，由老司机来管理这些新司机。
   
  （3）抽象工厂模式：（待补充）
    
11.被定义为final的常量定义时需要使用大写字母命名，并且中间使用下划线进行连接。

---内部类预定---

12.在内部类中可以随意使用外部类的成员，即使这些成员被修饰为private。

13.在一个编译单元（源文件）中只能有一个被修饰为public的类，且文件名应为该类名；当编译单元内无public类时，可随意给文件命名。

14.若一个public类中有一个非public成员，则其他包中的类可通过导入包来操作这个public类，但不能操作这个非public成员。

15.javadoc只能为public和protected成员进行文档注释，private和包内可访问成员的注释会被忽略掉，不过可以用-private进行标记，以便
   把private成员的注释也包括在内。

16.关于类的访问权限，有以下几点需要注意：
   （1）类只能是public或包访问权限（内部类除外）；
   （2）如果不希望他人对该类拥有访问权限，可以把构造器都指定为private，从而阻止他人创建该类的对象，但有一个例外，即该类的对象可在该类的static成员
    内部创建。这种特性催生了两种在构造器被指定为privaete情况下得到该类对象的方法：
    ①通过static方法返回该类的对象：
     eg:
        class Soup1{
            private Soup1(){}
            public static Soup1 makeSoup(){
                return new Soup1();
            }
        }
    
    ②singleton模式：
     eg:    class Soup2{
                private Soup2(){}
                private static Soup2 s = new Soup2();
                public static Soup2 access(){
                    return s;
                }
            }
     在singleton模式中，当外部获取Soup2的对象时，Soup2类的对象是作为Soup2的一个static private成员被创建的，故只能获取到一个，
     且只有通过一个public方法（该例中是access()）才能进行获取。
   
17.this关键字只能在方法内部使用，表示调用该方法的对象的引用，如this.a即该对象的成员，this.b()即该对象的方法。

18.构建一个子类对象时，先执行其父类的构造方法，再执行自身的构造方法；除构造器外，编译器禁止在其他任何方法中调用构造器；尽管可以用this调用一个构造器，
   但不能调用多个，而且必须将构造器调用语句置于起始处，eg:
   class Test(){
       Test(){
           this(5);//在该构造器中调用另一个构造器，该语句必须置于构造器的开头。
         //this(5);  只能调用一个。
       }
       Test(int i){
           System.out.println(i);
       }
   }
   
19.如果想调用父类的一个带参数的构造器，则必须在子类的构造器中编写super(参数)语句。

20.类的每个成员保证都会有一个初始值（对象引用初始值为NULL),但对于方法的局部变量，Java则不会提供初始值，eg:
   class Test{
       int i;//系统自动赋值为0
       void test(){
           int j;
           System.out.println(j);//报错，j未初始化。
       }
   }

21.可以在构造器中进行初始化，但构造器外的初始化优先于构造器内的初始化。

22.静态对象初始化优先于非静态对象初始化。

23.匿名内部类与普通内部类在实现向上转型为接口上有异曲同工之妙，普通内部类将实例化后的内部类对象赋给接口类型的引用以实现向上转型，而匿名内部类直接在
   addActionListener()方法的括号内返回一个接口类型的匿名内部类对象，如下例eg:
   JButton jb = new JButton();
   jb.addActionListener(new ActionListener(){//括号内直接实例化了一个接口类型，省去了将实例化结果赋给接口类型的引用这一步
       public void actionPerformed(ActionEvent arg0){}
   });

24.关于传递可变参数：eg: public Example(String...strings)
   即调用时参数个数是可变的。

25.需实现无限循环可用“while(true)”或“for(;;)”。

26.Java中的普通类不支持多继承，但接口支持多继承以起到扩展功能的作用。

27.对象存储在堆中，对象引用存储在堆栈中，基本类型（如int）存储在堆栈中，封装类（如Integer）存储在堆中。

28.类的成员变量即使没有进行初始化也会获得一个默认值，但局部变量（如方法中定义的变量）不会。

29.C语言的函数名不能重复，而Java可以对函数（方法）进行重载。

30.现有一个方法：void exam(datatype n)，当调用该方法时传入参数的类型若小于datatype则自动提升，若大于datatype则需进行窄化转换。
   Java类型由低字节到高字节提升规律如下：byte->short->int->long->float->double，char类型直接提升到int类型。
   
31.使用System.out.println("对象引用")方法打印对象时，会默认调用该对象的toString()方法。
   
32.别名现象：若两个对象引用最初分别指向不同的对象，那么当在两个对象引用之间采用“=”操作符，如“t1=t2"后，t1被覆盖，也就是丢失了，而
   t1最初指向的对象会由垃圾回收器自动清理，最后t1和t2都指向t2最初指向的对象。
   
33.在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，而且想从多层嵌套中break或continue。

34.使用记事本编写Java程序时对包（Package）的相关操作：
   eg:（本例是在源文件B中导入源文件A）
   ①在“C:\java\exa”路径下创建源文件A，在java文件夹内的任意位置创建源文件B（在该例中B创建在exa之外，因为要进行导入测试），注意源文件B
   和源文件A所在的包exa必须在同一个文件夹（在本例中该文件夹是java，包名是exa)中；
   ②编辑A和B，A开头为“package exa;”，B开头为“import exa.A;”；
   ③打开cmd窗口，进入B所在路径并执行B。
   
35.当一个源文件中有多个类时，可为每个类都创建一个main()方法，便于进行单元测试；如何决定运行哪个main()方法：
   ①对于记事本编程，若源文件Test.java中有Test和Test2两个类，都有main()方法，则在cmd窗口中先执行“javac Test.java”，会生成两个类的.class文件，
   然后分别执行“java Test”和“java Test2”可分别运行两个main()方法；
   ②对于eclipse等IDE编程，提供可视化选择。
